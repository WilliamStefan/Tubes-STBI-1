#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('SearchEngine:server');
var http = require('http');
var stemmer = require('porter-stemmer').stemmer;
var natural = require('natural'),  
    stemmer = natural.PorterStemmer;
stemmer.attach();


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/**
 * Load document collection into array
 */

var stopWordFile = require('fs');
var stopWord = stopWordFile.readFileSync('../file/stopWord.txt').toString().split('\r\n');

var matrix = [];
var file = require('fs');
var documents = file.readFileSync('../file/ADI/adi.all').toString().split('.I');
for(var i = 0; i < documents.length;i++) {
    var document = documents[i];
    var element, title, author, words;

    if(document != '') {
        element = document.split('.T\r\n');
        element = element[1].split('.A\r\n');
        if(element.length == 2) {
            title = element[0];
            element = element[1].split('.W\r\n');
            if(element.length == 2) {
                author = element[0];
                words = element[1];
            }
        }
        else {
            element = element[0].split('.W\r\n');
            if(element.length == 2) {
                title = element[0];
                words = element[1];
            }
        }
        
        for(var k = 0 ; k < stopWord.length; k++){
          title = title.replace(new RegExp('\\s'+stopWord[k]+'\\s','gi'),' ');
          words = words.replace(new RegExp('\\s'+stopWord[k]+'\\s','gi'),' ');
        }
        title = title.replace(new RegExp('\\s*(\\d+|[^\\w])\\s','gi'),' ');
        title = title.replace(new RegExp('\\s[^\\w]\\s*','gi'),' ');
        words = words.replace(new RegExp('\\s*(\\d+|[^\\w])\\s','gi'),' ');
        words = words.replace(new RegExp('\\s[^\\w]\\s*','gi'),' ');
        
        console.log(title);
        var arrTitle = title.split(' ');
        for(var j = 0; j < arrTitle.length; j++){
          // arrTitle[j] = arrTitle[j].toLowerCase();
          // arrTitle[j] = arrTitle[j].replace(new RegExp('[^\\w]','g'),'');
          // arrTitle[j] = arrTitle[j].replace(new RegExp('kilo|milli|micro|ultra|intra|mega|nano|pico|pseudo','g'),'');
          // arrTitle[j] = arrTitle[j].replace(new RegExp('+^ss'),'');
          // console.log(stemmer(arrTitle[j]));
        }
        // console.log(title);
        // console.log(author);
        // console.log(words);

        // var titleStemmed = 
        console.log(stemmer.tokenizeAndStem(title));
        // var wordsStemmed = stemmer.tokenizeAndStem(words);

        // console.log(title);
        // console.log(author);
        // console.log(words);
        break;
    }
};