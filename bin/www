#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var Collection = require('../lib/Collection');
var debug = require('debug')('SearchEngine:server');
var http = require('http');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

// app.post('/', function(req, res) {
//   console.log(req.body);
//   res.send(200);

//   // sending a response does not pause the function
// });

/**
 * Load document collection into array
 */

var collection = new Collection();
// 
collection.loadQuery('../file/CISI/query.text');
collection.loadDocuments('../file/CISI/cisi.all');
collection.loadStopWords('../file/stopWord.txt');
collection.loadQrels('../file/CISI/qrels.text');
collection.processData();
collection.countIdf();
collection.countRecallPrecision();
// collection.indexing('What problems and concerns are there in making up descriptive titles? What difficulties are involved in automatically retrieving articles from approximate titles? What is the usual relevance of the content of articles to their titles?'
//   ,'option2','option5','option1','option2','option5','option1');
// collection.createInvertedFile('option2','option2','option1');